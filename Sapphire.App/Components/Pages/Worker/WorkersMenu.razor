<MudStack Row="false" Spacing="1" Class="p-1">
    @foreach (var worker in Database.Enumerate<WorkerAggregate>())
    {
        <a href="@($"/worker/{worker.Id}/calendar")">
            <MudCard Elevation="0" Outlined="true" Class="p-1" @onclick="@(() => Navigation.NavigateTo($"/worker/{worker.Id}/calendar"))"
                     Style="@Navigation.GetSelectedStyle($"/worker/{worker.Id}")">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.body2">@worker.Name</MudText>
                    <MudChip T="string" Size="Size.Small">@($"{worker.GetRegularHours(Database, DateOnly.FromDateTime(DateTime.UtcNow)).TotalHours:N1}h")</MudChip>
                </MudStack>
            </MudCard>
        </a>
    }

    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Row="true" Spacing="1">
        <MudIconButton Icon="@Icons.Material.Outlined.List" Size="Size.Small" Variant="Variant.Outlined" Href="/worker" />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" Size="Size.Small" Variant="Variant.Outlined" OnClick="CreateWorker"/>
    </MudStack>
</MudStack>


@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    [Inject] public required NavigationManager Navigation { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            Navigation.LocationChanged += (_, _) => InvokeAsync(StateHasChanged);
        
        base.OnAfterRender(firstRender);
    }

    private void CreateWorker()
    {
        var worker = new WorkerAggregate
        {
            Name = $"Worker {Database.Enumerate<WorkerAggregate>().Count() + 1}",
            ConstantBaseLoad = TimeSpan.FromHours(0.5)
        };

        var weeklyWorkDay = new WorkWeek()
        {
            WorkerId = worker.Id,
        };

        Database.Update(worker);
        Database.Update(weeklyWorkDay);
        Navigation.NavigateTo($"/worker/{worker.Id}/calendar");
    }
}
<MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
    <MudGrid Spacing="2">
        <MudItem sm="3" Style="display: flex; align-items: end">
            <MudSelect Dense="true" Class="overwrite" T="DayOfWeek" MultiSelection="false" Value="WeeklyWorkDay.DayOfWeek" ValueChanged="DayOfWeekChanged">
                @foreach (var dayOfWeek in (DayOfWeek[])Enum.GetValues(typeof(DayOfWeek)))
                {
                    <MudSelectItem T="DayOfWeek" Value="@dayOfWeek">@dayOfWeek</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem sm="3">
            <MudDatePicker Date="WeeklyWorkDay.ActiveFrom.ToDateTime(TimeOnly.MinValue)" DateChanged="ActiveFromChanged" Label="From"/>
        </MudItem>
        <MudItem sm="3">
            <MudDatePicker Date="WeeklyWorkDay.ActiveTo.ToDateTime(TimeOnly.MinValue)" DateChanged="ActiveToChanged" Label="To"/>
        </MudItem>
        <MudItem sm="3">
            <MudNumericField T="double" Value="WeeklyWorkDay.WorkingHours.TotalHours" ValueChanged="MaximalAllocationChanged" Format="N2" Label="Working Hours" AdornmentText="h" Adornment="Adornment.End"/>
        </MudItem>
    </MudGrid>

    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="Delete">Delete</MudButton>
</MudStack>

@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    [Parameter] public required WeeklyWorkDay WeeklyWorkDay { get; set; }

    private void DayOfWeekChanged(DayOfWeek obj)
    {
        WeeklyWorkDay.DayOfWeek = obj;
        Database.Update(WeeklyWorkDay);
    }

    private void ActiveFromChanged(DateTime? date)
    {
        if (date is null)
            return;

        WeeklyWorkDay.ActiveFrom = date.Value.ToDateOnly();
        Database.Update(WeeklyWorkDay);
    }

    private void ActiveToChanged(DateTime? date)
    {
        if (date is null)
            return;

        WeeklyWorkDay.ActiveTo = date.Value.ToDateOnly();
        Database.Update(WeeklyWorkDay);
    }

    private void MaximalAllocationChanged(double hours)
    {
        WeeklyWorkDay.WorkingHours = TimeSpan.FromHours(hours);
        Database.Update(WeeklyWorkDay);
    }

    private void Delete()
    {
        Database.Remove(WeeklyWorkDay);
    }
}
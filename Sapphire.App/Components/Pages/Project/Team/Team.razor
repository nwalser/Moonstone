@inherits DatabaseRefresh
@page "/project/{ProjectId:guid}/team"

<DefaultWindowLayout PageTitle="@($"{_project?.Name} - Team")">
    <SecondMenu>
        <ProjectsMenu />
    </SecondMenu>
    <ThirdMenu>
        <ProjectMenu ProjectId="ProjectId" />
    </ThirdMenu>
    
    <ChildContent>
        @if (_project is not null)
        {
            <MudGrid>
                @foreach (var worker in _workersInProject)
                {
                    <MudItem sm="12">
                        <BoxHeader Title="@worker.Name">
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="() => AddDailyRule(worker.Id)">Add Daily</MudButton>
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="() => AddWeeklyRule(worker.Id)">Add Weekly</MudButton>
                        </BoxHeader> 

                        <MudStack Row="false" Spacing="1">
                            @foreach (var dailyAllocation in _project.GetDailyAllocations(Database, worker.Id))
                            {
                                <MudCard Outlined="true" Elevation="0" Class="p-3">
                                    <DailyAllocationRuleView Rule="dailyAllocation"/>
                                </MudCard>
                            }
                            @foreach (var weeklyAllocation in _project.GetWeeklyAllocations(Database, worker.Id))
                            {
                                <MudCard Outlined="true" Elevation="0" Class="p-3">
                                    <WeeklyAllocationRuleView Rule="weeklyAllocation"/>
                                </MudCard>
                            }
                        </MudStack>
                    </MudItem>
                }
            </MudGrid>
        }
    </ChildContent>
</DefaultWindowLayout>


@code {
    [Parameter] public required Guid ProjectId { get; set; }

    private ProjectAggregate? _project;
    private List<WorkerAggregate> _workersInProject = [];

    protected override void OnLoadData()
    {
        _project = Database.Enumerate<ProjectAggregate>().Single(p => p.Id == ProjectId);
        _workersInProject = _project.GetWorkersInProject(Database).ToList();
    }

    private void AddDailyRule(Guid workerId)
    {
        var dailyRule = new DailyAllocationRule()
        {
            ProjectId = ProjectId,
            WorkerId = workerId,
            MaximalAllocation = TimeSpan.FromHours(8.5),
        };

        Database.Update(dailyRule);
    }

    private void AddWeeklyRule(Guid workerId)
    {
        var dailyRule = new WeeklyAllocationRule()
        {
            ProjectId = ProjectId,
            WorkerId = workerId,
        };

        Database.Update(dailyRule);
    }
}
@inherits DatabaseRefresh
@page "/project/{ProjectId:guid}/team"

<DefaultWindowLayout PageTitle="@($"{_project?.Name} - Team")">
    <SecondMenu>
        <ProjectsMenu />
    </SecondMenu>
    <ThirdMenu>
        <ProjectMenu ProjectId="ProjectId" />
    </ThirdMenu>
    
    <ChildContent>
        @if (_project is not null)
        {
            <MudGrid Spacing="2">
                @foreach (var worker in _workersInProject)
                {
                    <MudItem xs="12">
                        <BoxHeader Title="@worker.Name">
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="() => AddDailyRule(worker.Id)">Add Daily Allocation Rule</MudButton>
                            <MudButton Size="Size.Small" Variant="Variant.Outlined" OnClick="() => AddWeeklyRule(worker.Id)">Add Weekly Allocation Rule</MudButton>
                        </BoxHeader> 

                        <MudGrid Spacing="3">
                            <MudItem xs="6">
                                <MudGrid Spacing="2">
                                    @foreach (var dailyAllocation in _project.GetDailyAllocations(Database, worker.Id))
                                    {
                                        <MudItem xs="12">
                                            <MudCard Outlined="true" Elevation="0" Class="p-3">
                                                <DailyAllocationRuleView Rule="dailyAllocation"/>
                                            </MudCard>
                                        </MudItem>
                                    }
                                    @foreach (var weeklyAllocation in _project.GetWeeklyAllocations(Database, worker.Id))
                                    {
                                        <MudItem xs="12">
                                            <MudCard Outlined="true" Elevation="0" Class="p-3">
                                                <WeeklyAllocationRuleView Rule="weeklyAllocation"/>
                                            </MudCard>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudItem>
                            <MudItem xs="6">
                                <MudGrid Spacing="2">
                                    @foreach (var month in Enumerable.Range(0, 4).Select(m => DateTime.UtcNow.AddMonths(m)))
                                    {
                                        <MudItem xs="6">
                                            <MonthView Year="month.Year" Month="month.Month" Context="day">
                                                @{
                                                    var color = "transparent";

                                                    var maximalAllocatable = _project.GetMaximalAllocatable(Database, day, worker.Id);

                                                    if (maximalAllocatable > TimeSpan.Zero)
                                                        color = "var(--mud-palette-lines-default)";

                                                    var regularHours = worker.GetRegularHours(Database, day);
                                                    if (maximalAllocatable > TimeSpan.Zero && regularHours > TimeSpan.Zero)
                                                        color = "var(--mud-palette-success)";
                                                    
                                                    
                                                    <div style="width: calc(1 / 7* 100%); text-align: center; padding: 2px">
                                                        <div style="border: 1px solid @color; border-radius: var(--mud-default-borderradius); line-height: 1.5rem; font-size: 0.8rem;">
                                                            @day.Day
                                                        </div>
                                                    </div>
                                                }
                                            </MonthView>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudItem>
                        </MudGrid>
                        
                        <MudGrid>
                            
                        </MudGrid>
                        
                        <MudStack Row="false" Spacing="1">

                        </MudStack>
                    </MudItem>
                }
            </MudGrid>
        }
    </ChildContent>
</DefaultWindowLayout>


@code {
    [Parameter] public required Guid ProjectId { get; set; }

    private ProjectAggregate? _project;
    private List<WorkerAggregate> _workersInProject = [];

    protected override void OnLoadData()
    {
        _project = Database.Enumerate<ProjectAggregate>().Single(p => p.Id == ProjectId);
        _workersInProject = _project.GetWorkersInProject(Database).ToList();
    }

    private void AddDailyRule(Guid workerId)
    {
        var dailyRule = new DailyAllocationRule()
        {
            ProjectId = ProjectId,
            WorkerId = workerId,
            MaximalAllocation = TimeSpan.FromHours(8.5),
        };

        Database.Update(dailyRule);
    }

    private void AddWeeklyRule(Guid workerId)
    {
        var dailyRule = new WeeklyAllocationRule()
        {
            ProjectId = ProjectId,
            WorkerId = workerId,
        };

        Database.Update(dailyRule);
    }
}
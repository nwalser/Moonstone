<MudStack Row="true" Spacing="2" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
    <MudGrid Spacing="2">
        <MudItem sm="3">
            <MudSelect Dense="true" Class="overwrite" T="Guid" MultiSelection="false" Value="Rule.WorkerId" ValueChanged="WorkerIdChanged">
                @foreach (var worker in Workers)
                {
                    <MudSelectItem T="Guid" Value="@worker.Id">@worker.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem sm="3">
            <MudDatePicker Date="Rule.ActiveFrom.ToDateTime(TimeOnly.MinValue)" DateChanged="ActiveFromChanged" Label="Active From"/>
        </MudItem>
        <MudItem sm="3">
            <MudDatePicker Date="Rule.ActiveTo.ToDateTime(TimeOnly.MinValue)" DateChanged="ActiveToChanged" Label="Active Until"/>
        </MudItem>
        <MudItem sm="3">
            <MudNumericField T="double" Value="Rule.MaximalAllocation.TotalHours" ValueChanged="MaximalAllocationChanged" Format="N2" Label="Maximal Allocation" AdornmentText="h" Adornment="Adornment.End"/>
        </MudItem>
    </MudGrid>
    
    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="Delete">Delete</MudButton>
</MudStack>

@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    
    [Parameter] public required DailyAllocationRule Rule { get; set; }
    [Parameter] public required List<WorkerAggregate> Workers { get; set; }


    private void WorkerIdChanged(Guid obj)
    {
        Rule.WorkerId = obj;
        Database.Update(Rule);
    }

    private void ActiveFromChanged(DateTime? date)
    {
        if (date is null)
            return;

        Rule.ActiveFrom = date.Value.ToDateOnly();
        Database.Update(Rule);
    }

    private void ActiveToChanged(DateTime? date)
    {
        if (date is null)
            return;

        Rule.ActiveTo = date.Value.ToDateOnly();
        Database.Update(Rule);
    }

    private void MaximalAllocationChanged(double hours)
    {
        Rule.MaximalAllocation = TimeSpan.FromHours(hours);
        Database.Update(Rule);
    }

    private void Delete()
    {
        Database.Remove(Rule); // todo implement proper deletions
    }
}
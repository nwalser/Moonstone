@using Size = MudBlazor.Size
@inherits DatabaseRefresh
@page "/project/{ProjectId:guid}"

<DefaultWindowLayout>
    <MudContainer Class="my-10">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
            <MudText Typo="Typo.h3">Tasks</MudText>

            <MudStack Row="true" Spacing="1">
                <MudButton OnClick="() => AddRootTodo()" Variant="Variant.Outlined" Size="Size.Small">Add Todo</MudButton>
            </MudStack>
        </MudStack>

        <MudGrid Spacing="1">
            <FluentDragContainer TItem="TodoAggregate" OnDropEnd="OnDropEnd" Class="w-full">
                <TodoGroup Depth="0" Todos="_todos" ProjectId="ProjectId" TodoId="null"/>
            </FluentDragContainer>
        </MudGrid>
    </MudContainer>
</DefaultWindowLayout>


@code {
    [Parameter] public required Guid ProjectId { get; set; }

    private List<TodoAggregate> _todos = [];

    protected override void OnLoadData()
    {
        _todos = Database.Enumerate<TodoAggregate>()
            .Where(t => t.ProjectId == ProjectId)
            .ToList();
    }

    private void AddRootTodo()
    {
        var todo = new TodoAggregate
        {
            Name = "New Todo",
            ProjectId = ProjectId,
            ParentId = null
        };

        Database.Update(todo);
        InvokeAsync(StateHasChanged);
    }

    private void OnDropEnd(FluentDragEventArgs<TodoAggregate> e)
    {
        // cannot reference itself
        if (e.Source.Item.Id == e.Target.Item.Id) return;

        // cannot reference existing child
        var item = e.Target.Item;
        var parents = new List<TodoAggregate>();
        while (item.ParentId is not null)
        {
            item = _todos.Single(t => t.Id == item.ParentId);
            parents.Add(item);
        }

        if (parents.Any(p => p.Id == e.Source.Item.Id)) return;

        // reference new parent
        e.Source.Item.ParentId = e.Target.Item.Id;
        Database.Update(e.Source.Item);
    }

}
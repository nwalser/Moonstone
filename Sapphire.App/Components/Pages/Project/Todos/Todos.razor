@using Orientation = Microsoft.FluentUI.AspNetCore.Components.Orientation
@inherits DatabaseRefresh
@page "/project/{ProjectId:guid}"

<FluentStack VerticalAlignment="VerticalAlignment.Top" Orientation="Orientation.Vertical" Class="h-full p-8">
    <FluentButton @onclick="AddRootTodo">Add Todo</FluentButton>
    <FluentDragContainer TItem="TodoAggregate" OnDropEnd="OnDropEnd" Class="w-full">
        <TodoGroup Depth="0" Todos="_todos" ProjectId="ProjectId" TodoId="null" />
    </FluentDragContainer>
</FluentStack>

@code {
    [Parameter] public required Guid ProjectId { get; set; }

    private List<TodoAggregate> _todos = [];
    private List<TodoAggregate> _rootTodo = [];

    protected override void OnLoadData()
    {
        _todos = Database.Enumerate<TodoAggregate>()
            .Where(t => t.ProjectId == ProjectId)
            .ToList();

        _rootTodo = _todos.Where(t => t.ParentId is null).ToList();
    }

    private void AddRootTodo()
    {
        var todo = new TodoAggregate
        {
            Name = "New Todo",
            ProjectId = ProjectId,
            ParentId = null
        };

        Database.Update(todo);
        InvokeAsync(StateHasChanged);
    }

    private void OnDropEnd(FluentDragEventArgs<TodoAggregate> e)
    {
        // cannot reference itself
        if (e.Source.Item.Id == e.Target.Item.Id) return;

        // cannot reference existing child
        var item = e.Target.Item;
        var parents = new List<TodoAggregate>();
        while (item.ParentId is not null)
        {
            item = _todos.Single(t => t.Id == item.ParentId);
            parents.Add(item);
        }

        if (parents.Any(p => p.Id == e.Source.Item.Id)) return;

        // reference new parent
        e.Source.Item.ParentId = e.Target.Item.Id;
        Database.Update(e.Source.Item);
    }

}
@using System.Text.Json

<MudGrid Spacing="0">
    <MudItem xs="3" Class="p-5">
        <BoxHeader Title="Task" First="true"></BoxHeader>
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudTextField T="string" Value="@Todo.Name" ValueChanged="UpdateName" Label="Name" Immediate="false" AutoFocus="true"/>
            </MudItem>
            <MudItem xs="6">
                <MudNumericField T="double" Format="N1" Value="@Todo.CurrentEstimatedEffort.TotalHours" AdornmentText="h" ShrinkLabel="true" 
                                 Adornment="Adornment.End" ValueChanged="UpdateCurrentEstimatedEffort" Label="Current Estimate" Immediate="false"/>
            </MudItem>
            <MudItem xs="6">
                <MudNumericField T="double?" Format="N1" Value="@Todo.InitialGroupEstimatedEffort?.TotalHours" AdornmentText="h" ShrinkLabel="true" 
                                 Adornment="Adornment.End" ValueChanged="UpdateInitialGroupEstimatedEffort" Label="Initial Group Estimate" Immediate="false"/>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudSelect MultiSelection="true" T="Guid" AnchorOrigin="Origin.BottomCenter" Dense="true" Disabled="Todo.InheritsPossibleWorkerIds" MultiSelectionTextFunc="WorkerMultiSelectText"
                               SelectedValues="Todo.GetPossibleWorkerIds(Database)" ShrinkLabel="true" SelectedValuesChanged="UpdatePossibleAssignees" Label="Possible Workers" Immediate="false">
                        @foreach (var worker in Database.Enumerate<WorkerAggregate>())
                        {
                            <MudSelectItem T="Guid" Value="@worker.Id">@worker.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSwitch T="bool" ValueChanged="UpdateInheritWorker" Value="Todo.InheritsPossibleWorkerIds" Size="Size.Small" Class="mr-0"/>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudSelect MultiSelection="true" T="string" AnchorOrigin="Origin.BottomCenter" Dense="true" Disabled="Todo.InheritsTags" MultiSelectionTextFunc="TagsMultiSelectText"
                               SelectedValues="Todo.GetTags(Database)" ShrinkLabel="true" SelectedValuesChanged="UpdateTags" Label="Tags" Immediate="false">
                        @foreach (var tag in Project.PossibleTags.Order())
                        {
                            <MudSelectItem T="string" Value="@tag">@tag</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSwitch T="bool" ValueChanged="UpdateInheritTags" Value="Todo.InheritsTags" Size="Size.Small" Class="mr-0"/>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.body2">Splittable</MudText>
                    <MudCheckBox T="bool" Value="Todo.Splittable" ValueChanged="UpdateSplittable" Size="Size.Medium"/>
                </MudStack>
            </MudItem>
            <MudItem xs="12">
                <MudStack Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Row="true" Spacing="1" Class="p-2">
                    <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                        <MudButton OnClick="() => UpdateState(TodoState.Draft)" Disabled="Todo.State == TodoState.Draft">Draft</MudButton>
                        <MudButton OnClick="() => UpdateState(TodoState.Active)" Disabled="Todo.State == TodoState.Active">Active</MudButton>
                        <MudButton OnClick="() => UpdateState(TodoState.Completed)" Disabled="Todo.State == TodoState.Completed">Completed</MudButton>
                    </MudButtonGroup>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="6" Class="p-5">
        <TrackEffort Todo="Todo" />
    </MudItem>
    <MudItem xs="3" Class="p-5">
        <BoxHeader Title="Planned Allocations" First="true">
            @if (Todo.GetRemainingUnplannedEffort(Database) > TimeSpan.Zero)
            {
                <MudChip Icon="@Icons.Material.Filled.Warning" Color="Color.Error" Size="Size.Small" Variant="Variant.Outlined">Scheduling Incomplete</MudChip>
            }
        </BoxHeader>
        
        
        <MudStack Spacing="1">
            @foreach (var allocation in Database.PlannedAllocations.Where(t => t.TodoId == Todo.Id).GroupBy(a => a.WorkerId))
            {
                var worker = Database.Enumerate<WorkerAggregate>().SingleOrDefault(w => w.Id == allocation.Key);

                <MudPaper Outlined="true" Class="p-3">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudText Typo="Typo.body2">@worker?.Name</MudText>
                        <MudText Typo="Typo.body2">@($"{TimeSpanExtensions.Sum(allocation.Select(a => a.PlannedTime)).TotalHours:N1}h")</MudText>
                    </MudStack>
                </MudPaper>
            }
        </MudStack>
    </MudItem>
</MudGrid>


@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    
    [Parameter] public required TodoAggregate Todo { get; set; }
    [Parameter] public required ProjectAggregate Project { get; set; }
    
    private void UpdateName(string? value)
    {
        Todo.Name = value ?? "";
        Database.Update(Todo);
    }
    
    private void UpdateSplittable(bool value)
    {
        Todo.Splittable = value;
        Database.Update(Todo);
    }
    
    private void UpdateCurrentEstimatedEffort(double value)
    {
        Todo.CurrentEstimatedEffort = TimeSpan.FromHours(value);
        Database.Update(Todo);
    }
    
    private void UpdateInitialGroupEstimatedEffort(double? value)
    {
        if (value is null)
            Todo.InitialGroupEstimatedEffort = null;
        else
            Todo.InitialGroupEstimatedEffort = TimeSpan.FromHours(value.Value);
        
        Database.Update(Todo);
    }

    private void UpdatePossibleAssignees(IEnumerable<Guid> values)
    {
        Todo.SetPossibleWorkerIds(values.ToList());
        Database.Update(Todo);
    }
    
    private void UpdateTags(IEnumerable<string> values)
    {
        Todo.SetTags(values.ToList());
        Database.Update(Todo);
    }

    private void UpdateState(TodoState state)
    {
        Todo.State = state;
        Database.Update(Todo);
    }

    private string WorkerMultiSelectText(List<string> args)
    {
        return WorkerIdsText(args.Select(Guid.Parse));
    }
    
    private string TagsMultiSelectText(List<string> values)
    {
        return string.Join(", ", values);
    }

    private string WorkerIdsText(IEnumerable<Guid> values)
    {
        var names = values
            .Select(guid => Database.Enumerate<WorkerAggregate>().FirstOrDefault(w => w.Id == guid))
            .Where(w => w is not null)
            .Select(w => w?.GetDisplayName())
            .ToArray();

        return string.Join(", ", names);
    }

    private void UpdateInheritWorker(bool value)
    {
        Todo.InheritsPossibleWorkerIds = value;
        Database.Update(Todo);
    }
    
    private void UpdateInheritTags(bool value)
    {
        Todo.InheritsTags = value;
        Database.Update(Todo);
    }
}
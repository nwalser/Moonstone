<MudItem xs="12">
    <MudCard Elevation="0" Outlined="true" Class="my-1" Style="@(Editing ? "border-color: var(--mud-palette-text-primary)" : "")">
        <MudStack Row="false" Spacing="0">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="h-8">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="h-full">
                    <FluentDropZone Draggable="true" Droppable="true" Item="Todo" Class="h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]">
                        <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Size="Size.Small"/>
                    </FluentDropZone>

                    <div class="sortable-grab h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]">
                        <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Small"/>
                    </div>
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3" Class="flex-grow h-full" @onclick="ToggleEditing" Justify="Justify.Center">
                    <MudText Typo="Typo.body2" Class="w-80" Style="@($"padding-left: {Depth * 12}px")">
                        @switch (Todo.HasChildren(Database))
                        {
                            case true when Expanded:
                                <MudIconButton Icon="@Icons.Material.Outlined.KeyboardArrowDown" Size="Size.Small" OnClick="ToggleExpanded" Class="w-4"/>
                                break;
                            case true when !Expanded:
                                <MudIconButton Icon="@Icons.Material.Outlined.KeyboardArrowRight" Size="Size.Small" OnClick="ToggleExpanded" Class="w-4"/>
                                break;
                            case false:
                                <MudIconButton Size="Size.Small" Class="w-4"/>
                                break;
                        }

                        @Todo.Name
                    </MudText>

                    <MudText Typo="Typo.body2" Class="w-60 text-right truncate">
                        @if (Todo.HasChildren(Database))
                        {
                            @($"{Todo.GetGroupWorkedEffort(Database).TotalHours:N1}h / {Todo.GetGroupEstimatedEffort(Database).TotalHours:N1}h")
                        }
                    </MudText>
                    <MudText Typo="Typo.body2" Class="w-60 text-right truncate">
                        @($"{Todo.GetWorkedEffort(Database).TotalHours:N1}h / {Todo.GetEstimatedEffort(Database).TotalHours:N1}h")
                    </MudText>
                    
                    <MudText Typo="Typo.body2" Class="w-40 text-right truncate">@WorkerIdsText(Todo.PossibleWorkerIds)</MudText>
                    <MudText Typo="Typo.body2" Class="w-40 text-right truncate">@TagsMultiSelectText(Todo.Tags)</MudText>
                    <MudCheckBox Value="Todo.Splittable" ReadOnly="true" Class="w-12"/>

                    <MudSpacer />

                    @if (Todo.State == TodoState.Completed)
                    {
                        <MudChip Size="Size.Small" Color="Color.Success" Variant="Variant.Outlined">Completed</MudChip>
                    }

                    @if (Todo.State == TodoState.Draft)
                    {
                        <MudChip Size="Size.Small" Color="Color.Default" Variant="Variant.Outlined">Draft</MudChip>
                    }
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="h-full">
                    <div class="h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]" @onclick="async () => await Delete()">
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Warning"/>
                    </div>
                    <div class="h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]" @onclick="AddSubTodo">
                        <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Small"/>
                    </div>
                </MudStack>
            </MudStack>

            @if (Editing)
            {
                <TodoRowEdit Project="Project" Todo="Todo" />
            }
        </MudStack>
    </MudCard>
</MudItem>

@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    [Inject] public required IDialogService DialogService { get; set; }
    
    [Parameter] public required TodoAggregate Todo { get; set; }
    [Parameter] public required ProjectAggregate Project { get; set; }
    [Parameter] public required uint Depth { get; set; }
    [Parameter] public required List<TodoAggregate> Todos { get; set; }
    [Parameter] public required List<TodoAggregate> ChildTodos { get; set; }


    [Parameter] public bool Expanded { get; set; } = true;
    [Parameter] public EventCallback<bool> ExpandedChanged { get; set; }

    [Parameter] public bool Editing { get; set; } = false;
    [Parameter] public EventCallback<bool> EditingChanged { get; set; }
    
    private void AddSubTodo()
    {
        var todo = new TodoAggregate
        {
            Name = $"Task {Todos.Count}",
            ProjectId = Todo.ProjectId,
            ParentId = Todo.Id
        };

        Database.Update(todo);
        InvokeAsync(StateHasChanged);
    }

    private async Task Delete()
    {
        var allChildren = Todo.GetDescendantTodos(Database).ToList();
        List<TodoAggregate> allTodosToDelete = [..allChildren, Todo];
        
        var delete = await DialogService.ShowMessageBox(
            title: "Confirm Deletion", 
            message: $"Are you sure you want to delete {allTodosToDelete.Count} tasks?", 
            yesText: "Delete", 
            cancelText:"Cancel") ?? false;

        if (!delete) return;

        Database.Remove(allTodosToDelete);
    }

    private void ToggleEditing()
    {
        Editing = !Editing;
        EditingChanged.InvokeAsync(Editing);
    }

    private void ToggleExpanded()
    {
        Expanded = !Expanded;
        ExpandedChanged.InvokeAsync(Expanded);
    }
    
    private string WorkerIdsText(IEnumerable<Guid> values)
    {
        var names = values
            .Select(guid => Database.Enumerate<WorkerAggregate>().FirstOrDefault(w => w.Id == guid))
            .Select(w => w?.Name)
            .ToArray();

        return string.Join(", ", names);
    }
    
    private string TagsMultiSelectText(List<string> values)
    {
        return string.Join(", ", values);
    }
}
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
<div class="flex flex-col content-center rounded-md bg-[var(--fill-color)] my-1">
    <div class="flex content-center">
        <div class="flex items-center">
            <FluentDropZone Draggable="true" Droppable="true" Item="Todo" Class="h-full w-8 flex items-center justify-center hover:bg-[var(--neutral-fill-layer-hover)]">
                <FluentIcon Value="@(new Icons.Regular.Size16.MoreVertical())"/>
            </FluentDropZone>

            <div class="sortable-grab h-full w-8 flex items-center justify-center hover:bg-[var(--neutral-fill-layer-hover)]">
                <FluentIcon Value="@(new Icons.Regular.Size16.ArrowSort())"/>
            </div>
        </div>

        <div class="flex items-center w-96" @onclick="() => _editing = !_editing">
            @for (var i = 0; i < Depth; i++)
            {
            <div style="margin-left: 12px; height: 30px"></div>
            }
            <p>@Todo.Name</p>
        </div>

        <div class="flex items-center w-12" @onclick="() => _editing = !_editing">
            <p>@Todo.CurrentEstimatedEffort.TotalHours / @Todo.InitialEstimatedEffort.TotalHours</p>
        </div>

        <div class="flex items-center flex-grow" @onclick="() => _editing = !_editing">
            <p>Timeline</p>
        </div>
        <div class="flex items-center">
            <div class="h-full w-8 flex items-center justify-center hover:bg-[var(--neutral-fill-layer-hover)]" @onclick="AddSubTodo">
                <FluentIcon Value="@(new Icons.Regular.Size16.Add())"/>
            </div>
        </div>
    </div>

    @if (_editing)
    {
        <div class="grid grid-cols-4 p-4 gap-2">
            <FluentTextField ValueChanged="UpdateName" Label="Name" Value="@Todo.Name" Class="col-span-1 outline-none"/>
        </div>
    }
</div>

@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    [Parameter] public required TodoAggregate Todo { get; set; }
    [Parameter] public required uint Depth { get; set; }
    [Parameter] public required List<TodoAggregate> ChildTodos { get; set; }

    private bool _editing = false;
    
    private void AddSubTodo()
    {
        var todo = new TodoAggregate
        {
            Name = "New Todo 1",
            ProjectId = Todo.ProjectId,
            ParentId = Todo.Id
        };

        Database.Update(todo);
        InvokeAsync(StateHasChanged);
    }

    private void UpdateName(string? name)
    {
        if (name is null) return;

        Todo.Name = name;
        Database.Update(Todo);
    }
}
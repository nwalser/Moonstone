<MudItem xs="12">
    <MudCard Elevation="0" Outlined="true" Class="my-1 overflow-hidden" Style="@(!Todo.FilterMatches(Database, Filter) || Todo.State != TodoState.Active ? "filter: brightness(35%) !important" : string.Empty)">
        <MudStack Row="false" Spacing="0">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="h-8 hover:bg-[var(--mud-palette-lines-default)]" Style="@(TodoWorkerMetadata.Editing ? "background-color: var(--mud-palette-lines-default) !important" : string.Empty)">
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="h-full">
                    <FluentDropZone Draggable="true" Droppable="true" Item="Todo" Class="h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]">
                        <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Size="Size.Small"/>
                    </FluentDropZone>

                    <div class="sortable-grab h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]">
                        <MudIcon Icon="@Icons.Material.Filled.List" Size="Size.Small"/>
                    </div>
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="flex-grow h-full flex-shrink overflow-hidden" @onclick="ToggleEditing" Justify="Justify.FlexStart">
                    <MudText Typo="Typo.body2" Class="w-80 flex-shrink-0 truncate" Style="@($"padding-left: {Depth * 12}px")">
                        @{
                            @switch (Todo.HasChildren(Database))
                            {
                                case true when TodoWorkerMetadata.Expanded:
                                    <MudIconButton Icon="@Icons.Material.Outlined.KeyboardArrowDown" Size="Size.Small" OnClick="ToggleExpanded" Class="w-4"/>
                                    break;
                                case true when !TodoWorkerMetadata.Expanded:
                                    <MudIconButton Icon="@Icons.Material.Outlined.KeyboardArrowRight" Size="Size.Small" OnClick="ToggleExpanded" Class="w-4"/>
                                    break;
                                case false:
                                    <MudIconButton Size="Size.Small" Class="w-4" Disabled="true"/>
                                    break;
                            }
                        }
                        
                        @Todo.Name
                    </MudText>

                    <div class="w-40 h-full px-2 flex-shrink-0">
                        @if (Todo.InitialGroupEstimatedEffort is not null)
                        {
                            <HourProgress Progress="Todo.GetGroupWorkedEffort(Database)" Total="Todo.InitialGroupEstimatedEffort.Value"/>
                        }
                    </div>
                    <div class="w-40 h-full px-2 flex-shrink-0">
                        @if (Todo.HasChildren(Database))
                        {
                            <HourProgress Progress="Todo.GetGroupWorkedEffort(Database)" Total="Todo.GetGroupEstimatedEffort(Database)"/>
                        }
                    </div>
                    <div class="w-40 h-full px-2 flex-shrink-0">
                        @if (Todo.GetEstimatedEffort(Database) > TimeSpan.Zero)
                        {
                            <HourProgress Progress="Todo.GetWorkedEffort(Database)" Total="Todo.GetEstimatedEffort(Database)"/>
                        }
                    </div>

                    <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Class="w-50 flex-shrink-0" Row="true">
                        <MudText Typo="Typo.body2" Class="w-40 text-right truncate">@WorkersText(Todo.GetPossibleWorkers(Database))</MudText>
                    </MudStack>
                    <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Class="w-50 flex-shrink-0" Row="true">
                        <MudText Typo="Typo.body2" Class="w-40 text-right truncate">@TagsText(Todo.GetTags(Database))</MudText>
                    </MudStack>
                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="w-10 flex-shrink-0" Row="true">
                        <MudCheckBox Value="Todo.Splittable" ReadOnly="true" Class="w-12" Size="Size.Small"/>
                    </MudStack>

                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="h-2 w-full" Row="true">
                        @{
                            var allocations = Database.Enumerate<AllocationAggregate>().Where(t => t.TodoId == Todo.Id).ToList();
                            var plannedAllocations = Database.PlannedAllocations.Where(t => t.TodoId == Todo.Id).ToList();
                            var currentDate = DateOnly.FromDateTime(DateTime.UtcNow);
                            
                            <AllocationsGraphic
                                Today="currentDate"
                                Min="currentDate.AddDays(-14)"
                                Max="currentDate.AddDays(3 * 40)"
                                Allocations="allocations"
                                PlannedAllocations="plannedAllocations"
                                Deadline="Project.Deadline"/>
                        }
                    </MudStack>
                </MudStack>

                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="0" Class="h-full">
                    <div class="h-full w-8 flex items-center justify-center">
                        @if (Todo.GetRemainingUnplannedEffort(Database) > TimeSpan.Zero)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Color="Color.Error"/>
                        }
                    </div>
                    <div class="h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]" @onclick="async () => await Delete()">
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small"/>
                    </div>
                    <div class="h-full w-8 flex items-center justify-center hover:bg-[var(--mud-palette-lines-default)]" @onclick="AddSubTodo">
                        <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Small"/>
                    </div>
                </MudStack>
            </MudStack>

            @if (TodoWorkerMetadata.Editing)
            {
                <TodoRowEdit Project="Project" Todo="Todo" />
            }
        </MudStack>
    </MudCard>
</MudItem>

@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    [CascadingParameter] public required WorkerAggregate? CurrentWorker { get; set; }
    
    [Inject] public required IDialogService DialogService { get; set; }
    
    [Parameter] public required TodoAggregate Todo { get; set; }
    [Parameter] public required TodoWorkerMetadata TodoWorkerMetadata { get; set; }
    [Parameter] public required ProjectAggregate Project { get; set; }
    [Parameter] public required uint Depth { get; set; }
    [Parameter] public required List<TodoAggregate> Todos { get; set; }
    [Parameter] public required List<TodoAggregate> ChildTodos { get; set; }
    [Parameter] public string Filter { get; set; } = string.Empty;


    private void AddSubTodo()
    {
        var todo = new TodoAggregate
        {
            Name = $"Task {Todos.Count}",
            ProjectId = Todo.ProjectId,
            ParentId = Todo.Id,
            Order = Todos.Count,
        };

        Database.Update(todo);
        InvokeAsync(StateHasChanged);
    }

    private async Task Delete()
    {
        var delete = await DialogService.ShowMessageBox(
            title: "Confirm Deletion", 
            message: "Are you sure you want to delete this and all descendant tasks?", 
            yesText: "Delete", 
            cancelText:"Cancel") ?? false;

        if (!delete) return;

        Todo.Delete(Database);
    }

    private void ToggleEditing()
    {
        TodoWorkerMetadata.Editing = !TodoWorkerMetadata.Editing;
        Database.Update(TodoWorkerMetadata);
    }

    private void ToggleExpanded()
    {
        TodoWorkerMetadata.Expanded = !TodoWorkerMetadata.Expanded;
        Database.Update(TodoWorkerMetadata);
    }
    
    private string WorkersText(IEnumerable<WorkerAggregate> workers)
    {
        var names = workers
            .Select(w => w.GetDisplayName())
            .ToArray();

        return string.Join(", ", names);
    }
    
    private string TagsText(IEnumerable<string> values)
    {
        return string.Join(", ", values.Order());
    }
}
@using Sapphire.App.Extensions
@inherits LayoutComponentBase

<MudDialogProvider/>
<MudSnackbarProvider/>
<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="Theme.Default" DefaultScrollbar="true"/>

<CascadingValue TValue="BrowserWindow?" IsFixed="true" Value="WindowManager.GetCurrent()">
        @if (DatabaseService.Database is not null)
        {
            var worker = DatabaseService.Database.Enumerate<WorkerAggregate>().FirstOrDefault(w => w.Name == AppDb.Data.FullName);
            
            <CascadingValue TValue="WorkerAggregate?" IsFixed="true" Value="worker">
                <CascadingValue TValue="ProjectDatabase" IsFixed="true" Value="DatabaseService.Database">
                    <ErrorBoundary>
                        <ChildContent>
                            @Body
                        </ChildContent>
                        <ErrorContent>
                            <p>There was an error</p>
                        </ErrorContent>
                    </ErrorBoundary>
                </CascadingValue>
            </CascadingValue>
        }
        else
        {
            <ErrorBoundary>
                <ChildContent>
                    <Workspaces />
                </ChildContent>
                <ErrorContent>
                    <p>There was an error</p>
                </ErrorContent>
            </ErrorBoundary>
        }
</CascadingValue>

@code{
    [Inject] public required DatabaseService<ProjectDatabase> DatabaseService { get; set; }
    [Inject] public required WindowManager WindowManager { get; set; }
    [Inject] public required AppDb AppDb { get; set; }

    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }
    
    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
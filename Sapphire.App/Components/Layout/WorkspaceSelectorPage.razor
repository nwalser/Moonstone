<FluentStack HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Top" Class="h-full p-8">
    <FluentStack Width="800px" Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.PaneHeader" Class="flex-shrink-0">Recent Workspaces</FluentLabel>
            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End">
                <FluentButton OnClick="() => OpenWorkspace(create: true)">Create</FluentButton>
                <FluentButton OnClick="() => OpenWorkspace()">Open</FluentButton>
            </FluentStack>
        </FluentStack>

        <FluentStack Orientation="Orientation.Vertical" VerticalGap="4">
            @foreach (var recent in DatabaseService.RecentDatabases.Reverse().Take(10))
            {
                <FluentCard MinimalStyle="true">
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="0">
                            <FluentLabel Typo="Typography.Subject" Class="truncate">@Path.GetFileName(recent)</FluentLabel>
                            <FluentLabel Typo="Typography.Body" Class="truncate">@recent</FluentLabel>
                        </FluentStack>
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.End">
                            <FluentButton OnClick="() => DatabaseService.RemoveRecent(path: recent)" Disabled="@(!Path.Exists(recent))">Remove</FluentButton>
                            <FluentButton OnClick="() => OpenWorkspace(path: recent)" Disabled="@(!Path.Exists(recent))">Open</FluentButton>
                        </FluentStack>
                    </FluentStack>
                </FluentCard>
            }
        </FluentStack>
    </FluentStack>
</FluentStack>


@code {
    [Inject] public required DatabaseService<ProjectDatabase> DatabaseService { get; set; }
    [Inject] public required WindowManager WindowManager { get; set; }
    [Inject] public required Dialog Dialog { get; set; }
    [Inject] public required NavigationManager NavigationManager { get; set; }
    
    
    private async Task OpenWorkspace(string? path = null, bool create = false)
    {
        if (path is null)
        {
            var window = WindowManager.BrowserWindows.Single();
            var selection = await Dialog.ShowOpenDialogAsync(window, new OpenDialogOptions { Properties = [OpenDialogProperty.openDirectory] });
            path = selection.SingleOrDefault();
            
            if (path is null)
                return;
        }

        try
        {
            if (create)
                DatabaseService.Create(path);
            else
                DatabaseService.Open(path);
            
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            Dialog.ShowErrorBox("An error occured", ex.Message);
        }
    }
}
<div class="flex w-full flex-shrink h-8 bg-[var(--mud-palette-background)]" style="-webkit-app-region: drag; border-bottom: 1px var(--mud-palette-lines-default) solid;">
    <div class="flex flex-row h-full items-center px-4">
        @if (DatabaseService.Database is not null)
        {
            <p class="text-base select-none">@Path.GetFileName(DatabaseService.Database.RootFolder)</p>
            <button
                class="rounded-full select-none border-none h-5 w-5 justify-center items-center flex"
                style="-webkit-app-region: no-drag;"
                @onclick="CloseDatabase">
                <XMarkIcon class="h-3 w-3" />
            </button>
        }
    </div>
    <MudSpacer />
    <div class="flex" style="-webkit-app-region: no-drag;">
        <button
            class="rounded-none px-3 py-2 select-none border-none hover:bg-[var(--mud-palette-lines-default)]"
            @onclick="() => _window?.Minimize()">
            <MinusIcon class="h-4 w-4"/>
        </button>

        @if (_window?.IsMaximizedAsync().Result ?? false)
        {
            <button
                class="rounded-none px-3 py-2 select-none border-none hover:bg-[var(--mud-palette-lines-default)]"
                @onclick="() => _window?.Restore()">
                <Square2StackIcon class="h-4 w-4"/>
            </button>
        }
        else
        {
            <button
                class="rounded-none px-3 py-2 select-none border-none hover:bg-[var(--mud-palette-lines-default)]"
                @onclick="() => _window?.Maximize()">
                <ArrowsPointingOutIcon class="h-4 w-4"/>
            </button>
        }

        <button
            class="rounded-none px-3 py-2 select-none border-none hover:bg-[var(--mud-palette-lines-default)]"
            @onclick="() => _window?.Close()">
            <XMarkIcon class="h-4 w-4"/>
        </button>
    </div>
</div>

@code {
    [Inject] public required WindowManager WindowManager { get; set; }
    [Inject] public required DatabaseService<ProjectDatabase> DatabaseService { get; set; }
    [Inject] public required NavigationManager NavigationManager { get; set; }

    private BrowserWindow? _window;

    protected override void OnInitialized()
    {
        _window = WindowManager.BrowserWindows.SingleOrDefault();
        if (_window is not null)
            _window.OnResize += async () => await InvokeAsync(StateHasChanged);

        base.OnInitialized();
    }

    private void CloseDatabase()
    {
        DatabaseService.Close();
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
}
@implements IDisposable

<MudButton Size="Size.Small"
           Variant="Variant.Outlined"
           StartIcon="@Icons.Material.Outlined.Start" Class="no-drag mx-1"
           OnClick="() => Database.RunSimulation(DateTime.UtcNow)"
           Disabled="@Database.SimulationOngoing.Value"
           Color="@(Database.SimulationOngoing.Value ? Color.Warning : Color.Default)">
    @if (Database.SimulationOngoing.Value)
    {
        @($"Simulating ({Database.SimulationProgress.Value:P0})")
    }
    else
    { 
        @("Run Simulation")
    }
</MudButton>

@code {
    [CascadingParameter] public required ProjectDatabase Database { get; set; }
    [Inject] public required TimeZoneService Time { get; set; }

    private IDisposable? _subscription;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _subscription = Database.SimulationOngoing.Subscribe(_ => InvokeAsync(StateHasChanged));
            _subscription = Database.SimulationProgress.Subscribe(_ => InvokeAsync(StateHasChanged));
        }
        
        base.OnAfterRender(firstRender);
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }
}
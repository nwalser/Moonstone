@inherits LayoutComponentBase

<div class="flex flex-col h-full">
    <div class="flex w-full flex-shrink text-primary-50 bg-background-950 h-10" style="-webkit-app-region: drag;">
        <div class="flex-grow flex flex-row align-middle">
            <p class="text-primary-50 m-2 select-none">Sapphire</p>
        </div>
        <div class="flex-shrink flex" style="-webkit-app-region: no-drag;">
            <button
                class="rounded-none px-3 py-2 hover:bg-background-800 select-none"
                @onclick="() => _window?.Minimize()">
                <MinusIcon class="h-4 w-4" />
            </button>

            @if(_window?.IsMaximizedAsync().Result ?? false)
            {
                <button
                    class="rounded-none px-3 py-2 hover:bg-background-800 select-none"
                    @onclick="() => _window?.Restore()">
                    <Square2StackIcon class="h-4 w-4" />
                </button>
            }
            else
            {
                <button
                    class="rounded-none px-3 py-2 hover:bg-background-800 select-none"
                    @onclick="() => _window?.Maximize()">
                    <ArrowsPointingOutIcon class="h-4 w-4" />
                </button>
            }

            <button
                class="rounded-none px-3 py-2 hover:bg-background-800 select-none"
                @onclick="() => _window?.Close()">
                <XMarkIcon class="h-4 w-4" />
            </button>
        </div>
    </div>
    <main class="bg-background-900 text-primary-50 flex-grow overflow-auto">
        @Body
    </main>
</div>




@code{

    [Inject] public required WindowManager WindowManager { get; set; }

    private BrowserWindow? _window;

    protected override void OnInitialized()
    {
        _window = WindowManager.BrowserWindows.Single();
        _window.OnResize += async () => await InvokeAsync(StateHasChanged);
        base.OnInitialized();
    }
}
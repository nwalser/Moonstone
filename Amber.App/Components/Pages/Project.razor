@using ChangeName = Amber.Domain.Documents.Todo.ChangeName
@layout ProjectsLayout

@page "/workspace/{WorkspaceId:int}/project/{ProjectId:guid}"

<WorkspaceComponent WorkspaceId="WorkspaceId" Context="workspace">
    @{
        var projectIdentity = workspace.GetById<ProjectAggregate>(ProjectId);

        <ReaderComponent TDocument="ProjectAggregate" Identity="projectIdentity">
            <OnLoad Context="project">
                <h1>@project.Name</h1>

                @foreach (var todoIdentity in project.Todos.Select(todoId => workspace.GetById<TodoAggregate>(todoId)))
                {
                    <ReaderComponent TDocument="TodoAggregate" Identity="todoIdentity">
                        <OnLoad Context="todo">
                            <MudStack Row="true">
                                <MudTextField T="string" Value="@todo.Name" ValueChanged="name => TodoStore.AppendMutation(todoIdentity, new ChangeName(name))" Immediate="false" />
                                <MudNumericField T="double" Value="@todo.EstimatedEffort.TotalHours" ValueChanged="effort => TodoStore.AppendMutation(todoIdentity, new ChangeEstimatedEffort(TimeSpan.FromHours(effort)))" Immediate="false" />
                                <MudCheckBox T="bool" Value="@todo.Completed" ValueChanged="completed => TodoStore.AppendMutation(todoIdentity, new ChangeCompletion(completed))" />
                                <MudButton OnClick="() => DeleteTodoItem(workspace, projectIdentity, todoIdentity)">Delete</MudButton>
                            </MudStack>
                        </OnLoad>
                    </ReaderComponent>
                }

                <MudButton OnClick="() => CreateTodoItem(workspace, projectIdentity)">Add</MudButton>
            </OnLoad>
        </ReaderComponent>
    }
</WorkspaceComponent>

@code {
    [Inject] public required Store<ProjectAggregate> ProjectStore { get; set; }
    [Inject] public required Store<TodoAggregate> TodoStore { get; set; }
    
    [Parameter] public int WorkspaceId { get; init; }
    [Parameter] public Guid ProjectId { get; init; }

    private void CreateTodoItem(Workspace workspace, DocumentIdentity projectDocument)
    {
        var newTodo = workspace.Create<TodoAggregate>();
        ProjectStore.AppendMutation(projectDocument, new AddTodo(newTodo.Id));
    }

    private void DeleteTodoItem(Workspace workspace, DocumentIdentity projectDocument, DocumentIdentity todoDocument)
    {
        ProjectStore.AppendMutation(projectDocument, new RemoveTodo(todoDocument.Id));
        workspace.Delete(todoDocument);
    }
}
@page "/project/{ProjectId:guid}"
@using Amber.Domain.Documents.Project
@using Amber.Domain.Documents.Todo
@using Moonstone
@using ChangeName = Amber.Domain.Documents.Todo.ChangeName

<CurrentWorkspace Context="workspace">
    @{
        var projectIdentity = workspace.GetById<ProjectAggregate>(ProjectId);

        <ReaderComponent TDocument="ProjectAggregate" Identity="projectIdentity">
            <OnLoad Context="project">
                <h1>@project.Name</h1>

                @foreach (var todoId in project.Todos)
                {
                    var todoIdentity = workspace.GetById<TodoAggregate>(todoId);

                    <ReaderComponent TDocument="TodoAggregate" Identity="todoIdentity">
                        <OnLoad Context="todo">
                            <MudStack Row="true">
                                <MudTextField T="string" Value="@todo.Name" ValueChanged="name => TodoReader.AppendMutation(todoIdentity, new ChangeName(name))" Immediate="false" />
                                <MudNumericField T="double" Value="@todo.EstimatedEffort.TotalHours" ValueChanged="effort => TodoReader.AppendMutation(todoIdentity, new ChangeEstimatedEffort(TimeSpan.FromHours(effort)))" Immediate="false" />
                                <MudCheckBox T="bool" Value="@todo.Completed" ValueChanged="completed => TodoReader.AppendMutation(todoIdentity, new ChangeCompletion(completed))" />
                                <MudButton OnClick="() => DeleteTodoItem(workspace, projectIdentity, todoIdentity)">Delete</MudButton>
                            </MudStack>
                        </OnLoad>
                        <OnError Context="exception">
                            <p>@exception.Message</p>
                        </OnError>
                    </ReaderComponent>
                }
                
                <MudButton OnClick="() => CreateTodoItem(workspace, projectIdentity)">Add</MudButton>
            </OnLoad>
            <OnError Context="exception">
                <p>@exception.Message</p>
            </OnError>
        </ReaderComponent>
        

    }
</CurrentWorkspace>

@code {
    [Inject] public required Reader<ProjectAggregate> ProjectReader { get; set; }
    [Inject] public required Reader<TodoAggregate> TodoReader { get; set; }
    
    [Parameter] public Guid ProjectId { get; init; }

    private void CreateTodoItem(Workspace workspace, DocumentIdentity projectDocument)
    {
        var newTodo = workspace.Create<TodoAggregate>();
        ProjectReader.AppendMutation(projectDocument, new AddTodo(newTodo.Id));
    }

    private void DeleteTodoItem(Workspace workspace, DocumentIdentity projectDocument, DocumentIdentity todoDocument)
    {
        ProjectReader.AppendMutation(projectDocument, new RemoveTodo(todoDocument.Id));
        workspace.Delete(todoDocument);
    }
}
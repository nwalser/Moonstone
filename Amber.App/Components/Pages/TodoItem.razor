@using Amber.App.Services
@using Amber.Domain.Documents.Todo

@if (_todo is not null && Workspaces.Current is not null)
{   
    <MudStack Row="true">
        <MudTextField T="string" Value="_todo.Name" Immediate="false" ValueChanged="name => Workspaces.Current.ApplyMutation<Todo>(Id, new ChangeName(name))"/>
        <MudNumericField T="double" Value="_todo.EstimatedEffort.TotalHours" Immediate="false" ValueChanged="hours => Workspaces.Current.ApplyMutation<Todo>(Id, new ChangeEstimatedEffort(TimeSpan.FromHours(hours)))"/>
        <MudCheckBox T="bool" Value="_todo.Completed" ValueChanged="completed => Workspaces.Current.ApplyMutation<Todo>(Id, new ChangeCompletion(completed))"/>
    </MudStack>
}

@code {
    [Inject] public required Workspaces Workspaces { get; init; }
    
    [Parameter] public Guid Id { get; set; }

    private Todo? _todo;
    
    protected override Task OnParametersSetAsync()
    {
        Workspaces.Current?.Observe<Todo>(Id).Subscribe(todo =>
        {
            _todo = todo; 
            InvokeAsync(StateHasChanged);
        });
        
        return base.OnParametersSetAsync();
    }
}
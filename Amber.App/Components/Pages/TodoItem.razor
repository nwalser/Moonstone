@using Amber.App.Services
@using Amber.Domain.Documents.Todo
@using Amber.Domain.Documents.Todo.Mutations

@if (_todo is not null && Workspaces.Current is not null)
{   
    <MudStack Row="true">
        <MudTextField T="string" Value="_todo.Name" Immediate="false" ValueChanged="(v) => Workspaces.Current.ApplyMutation<Todo>(Id, new ChangeName() { Name = v })"/>
        <MudNumericField T="double" Value="_todo.EstimatedEffort.TotalHours" ValueChanged="v => Workspaces.Current.ApplyMutation<Todo>(Id, new ChangeEstimatedEffort() { EstimatedEffort = TimeSpan.FromHours(v) })"/>
        <MudCheckBox T="bool" Value="_todo.Completed" ValueChanged="(v) => Workspaces.Current.ApplyMutation<Todo>(Id, new ChangeCompletion() { Completed = v })"/>
    </MudStack>
}

@code {
    [Inject] public required Workspaces Workspaces { get; init; }
    
    [Parameter] public Guid Id { get; set; }

    private Todo? _todo;
    
    protected override Task OnParametersSetAsync()
    {
        Workspaces.Current?.Observe<Todo>(Id).Subscribe((t) => _ = UpdateTodo(t));
        return base.OnParametersSetAsync();
    }

    private async Task UpdateTodo(Todo todo)
    {
        _todo = todo;
        await InvokeAsync(StateHasChanged);
    }
}